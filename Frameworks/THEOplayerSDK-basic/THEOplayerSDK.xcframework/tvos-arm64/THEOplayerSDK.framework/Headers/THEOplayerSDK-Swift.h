// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="THEOplayerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif






/// A request, either for a <code>CertificateRequest</code> or a <code>LicenseRequest</code>.
SWIFT_CLASS("_TtC13THEOplayerSDK7Request")
@interface Request : NSObject
/// The URL for the certificate server. By default, this will equal the certificate URL configured in the `KeySystemConfiguration``.
@property (nonatomic, copy) NSString * _Nonnull url SWIFT_DEPRECATED_OBJC("Swift property 'Request.url' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The method of the HTTP request, for example: GET, POST or PUT.
/// remark:
///
/// <ul>
///   <li>
///     Will be equal to GET for Fairplay certificate requests and POST for Widevine certificate requests.
///   </li>
///   <li>
///     Will be equal to POST for all license requests.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull method SWIFT_DEPRECATED_OBJC("Swift property 'Request.method' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The HTTP request headers to be sent to the server.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers SWIFT_DEPRECATED_OBJC("Swift property 'Request.headers' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The body of the certificate request.
/// remark:
///
/// <ul>
///   <li>
///     For GET requests (such as with Fairplay), the body will be empty (nil).
///   </li>
///   <li>
///     For POST requests (such as with Widevine): the body will contain the two bytes in an array as specified in the certificate request protocol.
///   </li>
/// </ul>
@property (nonatomic, copy) NSData * _Nullable body SWIFT_DEPRECATED_OBJC("Swift property 'Request.body' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Creates a new HTTP request for the given URL.
/// \param url The URL of the license or certificate server.
///
/// \param method The method of the HTTP request.
///
/// \param headers The HTTP headers to be sent to the server.
///
/// \param body The body of the request.
///
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(NSString * _Nonnull)method headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers body:(NSData * _Nullable)body OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'Request.init(url:method:headers:body:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A certificate request.
SWIFT_CLASS("_TtC13THEOplayerSDK18CertificateRequest")
@interface CertificateRequest : Request
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(NSString * _Nonnull)method headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers body:(NSData * _Nullable)body OBJC_DESIGNATED_INITIALIZER;
@end


/// A completion handler that should be called with the actual certificate, or an <code>Error</code> in case of failure.
SWIFT_PROTOCOL("_TtP13THEOplayerSDK27CertificateResponseCallback_")
@protocol CertificateResponseCallback
- (void)respondWithCertificate:(NSData * _Nonnull)certificate;
- (void)errorWithError:(NSError * _Nonnull)error;
@end


/// A completion handler that should be called with the modified <code>CertificateRequest</code>.
SWIFT_PROTOCOL("_TtP13THEOplayerSDK26CertificateRequestCallback_")
@protocol CertificateRequestCallback <CertificateResponseCallback>
- (void)requestWithRequest:(CertificateRequest * _Nonnull)request;
@end


/// The response, either of a <code>LicenseResponse</code> or for a <code>CertificateResponse</code> request.
SWIFT_CLASS("_TtC13THEOplayerSDK8Response")
@interface Response : NSObject
/// The request for which the response is being returned.
@property (nonatomic, strong) Request * _Nonnull request SWIFT_DEPRECATED_OBJC("Swift property 'Response.request' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The URL from which the response was returned. This might have been redirected transparently.
@property (nonatomic, copy) NSString * _Nonnull url SWIFT_DEPRECATED_OBJC("Swift property 'Response.url' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The status code as returned in the HTTP response.
@property (nonatomic) NSInteger status SWIFT_DEPRECATED_OBJC("Swift property 'Response.status' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The status text as returned in the HTTP response.
@property (nonatomic, copy) NSString * _Nonnull statusText SWIFT_DEPRECATED_OBJC("Swift property 'Response.statusText' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The HTTP headers as returned by the server.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers SWIFT_DEPRECATED_OBJC("Swift property 'Response.headers' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The body of the response.
@property (nonatomic, copy) NSData * _Nonnull body SWIFT_DEPRECATED_OBJC("Swift property 'Response.body' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The certificate response.
SWIFT_CLASS("_TtC13THEOplayerSDK19CertificateResponse")
@interface CertificateResponse : Response
/// Creates a CertificateResponse.
/// \param certificateRequest The <code>CertificateRequest</code> for which the response is being returned.
///
/// \param url The URL from which the response was returned. This might have been redirected transparently.
///
/// \param status The status code as returned in the HTTP response.
///
/// \param statusText The status text as returned in the HTTP response.
///
/// \param headers The HTTP headers as returned by the server.
///
/// \param body The body of the response.
///
- (nonnull instancetype)initWithCertificateRequest:(CertificateRequest * _Nonnull)certificateRequest url:(NSString * _Nonnull)url status:(NSInteger)status statusText:(NSString * _Nonnull)statusText headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers body:(NSData * _Nonnull)body OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'CertificateResponse.init(certificateRequest:url:status:statusText:headers:body:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@class LicenseRequest;
@protocol LicenseRequestCallback;
@class LicenseResponse;
@protocol LicenseResponseCallback;

/// This ContentProtectionIntegration defines some methods to alter license and certificate requests and responses.
SWIFT_PROTOCOL("_TtP13THEOplayerSDK28ContentProtectionIntegration_")
@protocol ContentProtectionIntegration
@optional
/// Handler which will be called when an HTTP request for a new certificate is about to be sent.
/// remark:
///
/// <ul>
///   <li>
///     If a valid certificate was provided as part of the <code>KeySystemConfiguration.certificate</code>, this handler will not be called.
///   </li>
///   <li>
///     The handler must return either a request or a raw certificate. When a (possibly modified) request is returned,
///     the player will send that request instead of the original request. When a raw certificate is returned,
///     the request is skipped entirely and the certificate is used directly. If no handler is provided, the player sends the original request.
///   </li>
///   <li>
///     For example, an integration may want to “wrap” the request body in a different format (e.g. JSON or XML) for
///     certain DRM vendors, or add additional authentication tokens to the request.
///     Alternatively, an integration may want to send the HTTP request using its own network stack,
///     and return the final certificate response to the player.
///   </li>
/// </ul>
/// \param request The <code>CertificateRequest</code> that is about to be sent.
///
/// \param callback The <code>CertificateRequestCallback</code> that should be called with the modified <code>CertificateRequest</code>.
///
- (void)onCertificateRequestWithRequest:(CertificateRequest * _Nonnull)request callback:(id <CertificateRequestCallback> _Nonnull)callback;
/// Handler which will be called when an HTTP request for a certificate returns a response.
/// remark:
///
/// <ul>
///   <li>
///     The completion handler <code>callback</code> will be called regardless of the HTTP status code on the response (i.e. also for unsuccessful statuses outside of the 200-299 range).
///   </li>
///   <li>
///     The completion handler <code>callback</code> must return the raw certificate, in a manner suitable for further processing by the CDM.
///     If no completion handler is provided, the player uses the response body as raw certificate, but only if the response’s status indicates success.
///   </li>
///   <li>
///     For example, an integration may want to “unwrap” a wrapped JSON or XML response body, turning it into a raw certificate.
///   </li>
/// </ul>
/// \param response The <code>CertificateResponse</code> that was returned from the certificate request.
///
/// \param callback The <code>CertificateResponseCallback</code> completion handler that should be called with the modified <code>CertificateResponse</code>.
///
- (void)onCertificateResponseWithResponse:(CertificateResponse * _Nonnull)response callback:(id <CertificateResponseCallback> _Nonnull)callback;
/// Handler which will be called when an HTTP request for a new license is about to be sent.
/// remark:
///
/// <ul>
///   <li>
///     The completion handler <code>callback</code> must return either a request or a raw license. When a (possibly modified) request is returned,
///     the player will send that request instead of the original request. When a raw license is returned,
///     the request is skipped entirely and the license is used directly. If no handler is provided, the player sends the original request.
///   </li>
///   <li>
///     For example, an integration may want to “wrap” the request body in a different format (e.g. JSON or XML) for certain DRM vendors,
///     or add additional authentication tokens to the request. Alternatively, an integration may want to send the HTTP request using its own network stack,
///     and return the final license response to the player.
///   </li>
/// </ul>
/// \param request The <code>LicenseRequest</code> that is about to be sent.
///
/// \param callback The <code>LicenseRequestCallback</code> that should be called with the modified <code>LicenseRequest</code>.
///
- (void)onLicenseRequestWithRequest:(LicenseRequest * _Nonnull)request callback:(id <LicenseRequestCallback> _Nonnull)callback;
/// Handler which will be called when an HTTP request for a license returns an response.
/// remark:
///
/// <ul>
///   <li>
///     The completion handler <code>callback</code> will be called regardless of the HTTP status code on the response (i.e. also for unsuccessful statuses outside of the 200-299 range).
///   </li>
///   <li>
///     The completion handler <code>callback</code> must return the raw license, in a manner suitable for further processing by the CDM.
///   </li>
///   <li>
///     If no completion handler is provided, the player uses the response body as raw license, but only if the response’s status indicates success.
///     For example, an integration may want to “unwrap” a wrapped JSON or XML response body, turning it into a raw license.
///   </li>
/// </ul>
/// \param response The <code>LicenseResponse</code> that was returned from the license request.
///
/// \param callback The <code>LicenseResponseCallback</code> that should be called with the modified <code>LicenseResponse</code>.
///
- (void)onLicenseResponseWithResponse:(LicenseResponse * _Nonnull)response callback:(id <LicenseResponseCallback> _Nonnull)callback;
/// A function to extract the Fairplay content ID from the key URI, as given by the URI attribute of the <code>#EXT-X-KEY</code> tag in the HLS playlist (m3u8).
/// remark:
///
/// <ul>
///   <li>
///     In order to start a Fairplay license request, the player must provide the initialization data, the content ID and the certificate to the CDM.
///   </li>
///   <li>
///     The content ID is usually contained in the key URI in some vendor-specific way, for example in the host name (e.g. <code>skd://123456789</code>)
///     or in the URL query (e.g. <code>skd://vendor?123456789</code>). This function should extract this content ID from the key URI.
///   </li>
///   <li>
///     This method is required only for Fairplay integrations. It is ignored for other key systems.
///   </li>
/// </ul>
/// \param skdUrl The key URI.
///
- (NSString * _Nonnull)extractFairplayContentIdWithSkdUrl:(NSString * _Nonnull)skdUrl SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents an <code>EventDispatcher</code> which will be responsible for dispatching an event, once it occurs.
SWIFT_CLASS("_TtC13THEOplayerSDK15EventDispatcher")
@interface EventDispatcher : NSObject
- (NSString * _Nonnull)getMinimizeFunction SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'EventDispatcher.getMinimizeFunction()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Key system configuration.
SWIFT_CLASS("_TtC13THEOplayerSDK22KeySystemConfiguration")
@interface KeySystemConfiguration : NSObject
/// Specifies the URL of the licensing server.
@property (nonatomic, copy) NSURL * _Nullable licenseAcquisitionURL SWIFT_DEPRECATED_OBJC("Swift property 'KeySystemConfiguration.licenseAcquisitionURL' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Specifies the URL of the FairPlay certificate server.
@property (nonatomic, copy) NSURL * _Nullable certificateURL SWIFT_DEPRECATED_OBJC("Swift property 'KeySystemConfiguration.certificateURL' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A license request.
SWIFT_CLASS("_TtC13THEOplayerSDK14LicenseRequest")
@interface LicenseRequest : Request
/// The SKD URL
/// - Remark: For example (skd://fb64ba7c5bd34bf188cf9ba76ab8370e) as extracted from the #EXT-X-KEY tag in the HLS playlist.
@property (nonatomic, copy) NSString * _Nullable fairplaySkdUrl SWIFT_DEPRECATED_OBJC("Swift property 'LicenseRequest.fairplaySkdUrl' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Creates a new LicenseRequest for the given URL.
/// \param url The URL of the license or certificate server.
///
/// \param method The method of the HTTP request.
///
/// \param headers The HTTP headers to be sent to the server.
///
/// \param body The body of the request.
///
/// \param fairplaySkdUrl The SKD URL as extracted from the #EXT-X-KEY tag in the HLS playlist.
///
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(NSString * _Nonnull)method headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers body:(NSData * _Nullable)body fairplaySkdUrl:(NSString * _Nullable)fairplaySkdUrl useCredentials:(BOOL)useCredentials OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'LicenseRequest.init(url:method:headers:body:fairplaySkdUrl:useCredentials:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(NSString * _Nonnull)method headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers body:(NSData * _Nullable)body SWIFT_UNAVAILABLE;
@end


/// A completion handler that should be called with the actual license, or an <code>Error</code> in case of failure.
SWIFT_PROTOCOL("_TtP13THEOplayerSDK23LicenseResponseCallback_")
@protocol LicenseResponseCallback
- (void)respondWithLicense:(NSData * _Nonnull)license;
- (void)errorWithError:(NSError * _Nonnull)error;
@end


/// A completion handler that should be called with the modified <code>LicenseRequest</code>.
SWIFT_PROTOCOL("_TtP13THEOplayerSDK22LicenseRequestCallback_")
@protocol LicenseRequestCallback <LicenseResponseCallback>
- (void)requestWithRequest:(LicenseRequest * _Nonnull)request;
@end


/// The license response.
SWIFT_CLASS("_TtC13THEOplayerSDK15LicenseResponse")
@interface LicenseResponse : Response
/// Creates a LicenseResponse.
/// \param licenseRequest The <code>LicenseRequest</code> for which the response is being returned.
///
/// \param url The URL from which the response was returned. This might have been redirected transparently.
///
/// \param status The status code as returned in the HTTP response.
///
/// \param statusText The status text as returned in the HTTP response.
///
/// \param headers The HTTP headers as returned by the server.
///
/// \param body The body of the response.
///
- (nonnull instancetype)initWithLicenseRequest:(LicenseRequest * _Nonnull)licenseRequest url:(NSString * _Nonnull)url status:(NSInteger)status statusText:(NSString * _Nonnull)statusText headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers body:(NSData * _Nonnull)body OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'LicenseResponse.init(licenseRequest:url:status:statusText:headers:body:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end



/// The MetadataDescription object is used to describe content.
SWIFT_CLASS("_TtC13THEOplayerSDK19MetadataDescription")
@interface MetadataDescription : NSObject
/// A dictionary of metadata.
/// remark:
///
/// <ul>
///   <li>
///     The metadata key is to be passed as a dictionary key. The key must be of type String.
///   </li>
///   <li>
///     The metadata value is to be passed as a dictionary value. The value must be of type Any.
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable metadataKeys SWIFT_DEPRECATED_OBJC("Swift property 'MetadataDescription.metadataKeys' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The title of the content.
@property (nonatomic, copy) NSString * _Nullable title SWIFT_DEPRECATED_OBJC("Swift property 'MetadataDescription.title' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Constructs a MetadataDescription object.
/// \param metadataKeys A dictionary of metadata.
///
/// \param title The title of the content, defaults to nil.
///
- (nonnull instancetype)initWithMetadataKeys:(NSDictionary<NSString *, id> * _Nullable)metadataKeys title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'MetadataDescription.init(metadataKeys:title:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC13THEOplayerSDK7Promise")
@interface Promise : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class TypedSource;
@class TextTrackDescription;

/// The <code>SourceDescription</code> object is used to describe a configuration of a source for a THEOplayer instance.
SWIFT_CLASS("_TtC13THEOplayerSDK17SourceDescription")
@interface SourceDescription : NSObject
/// Represents the source of the media to be played.
@property (nonatomic, copy) NSArray<TypedSource *> * _Nonnull sources SWIFT_DEPRECATED_OBJC("Swift property 'SourceDescription.sources' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The textTracks property can be used to add an array of side-loaded text tracks to the player.
/// remark:
///
/// <ul>
///   <li>
///     All valid tracks will be available for playback as long as the player’s source is not set again.
///   </li>
///   <li>
///     Each text track should be described as a TextTrackDescription.
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<TextTrackDescription *> * _Nullable textTracks SWIFT_DEPRECATED_OBJC("Swift property 'SourceDescription.textTracks' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The poster property can be used to specify a content poster per source.
/// remark:
///
/// The player’s content poster will be updated as soon as a new source with valid poster is set, or when the player’s own poster property is altered.
@property (nonatomic, copy) NSURL * _Nullable poster SWIFT_DEPRECATED_OBJC("Swift property 'SourceDescription.poster' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Metadata that can be used to describe content, e.g. when casting to chromecast.
@property (nonatomic, strong) MetadataDescription * _Nullable metadata SWIFT_DEPRECATED_OBJC("Swift property 'SourceDescription.metadata' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






SWIFT_PROTOCOL("_TtP13THEOplayerSDK17THEOScriptMessage_")
@protocol THEOScriptMessage
@property (nonatomic, readonly) id _Nonnull body;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nullable parsedBodyString;
@property (nonatomic, readonly, copy) NSData * _Nullable parsedBodyData;
@property (nonatomic, readonly, strong) Promise * _Nullable promise;
@end


SWIFT_PROTOCOL("_TtP13THEOplayerSDK24THEOScriptMessageHandler_")
@protocol THEOScriptMessageHandler
- (void)didReceiveWithMessage:(id <THEOScriptMessage> _Nonnull)message;
@end


/// The configuration for a THEOplayer instance.
SWIFT_CLASS("_TtC13THEOplayerSDK23THEOplayerConfiguration")
@interface THEOplayerConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A TextTrackDescription object contains a description of a side-loaded text track that will be added to the player.
SWIFT_CLASS("_TtC13THEOplayerSDK20TextTrackDescription")
@interface TextTrackDescription : NSObject
/// Specifies a source URL where the text track can be downloaded from.
@property (nonatomic, copy) NSURL * _Nonnull src SWIFT_DEPRECATED_OBJC("Swift property 'TextTrackDescription.src' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Specifies the main language of the track.
@property (nonatomic, copy) NSString * _Nonnull srclang SWIFT_DEPRECATED_OBJC("Swift property 'TextTrackDescription.srclang' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Specifies a label for the track which can be used to identify it.
@property (nonatomic, copy) NSString * _Nullable label SWIFT_DEPRECATED_OBJC("Swift property 'TextTrackDescription.label' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Helps get information regarding a certain period in the playback.
SWIFT_CLASS("_TtC13THEOplayerSDK9TimeRange")
@interface TimeRange : NSObject
/// The start time of the range.
@property (nonatomic, readonly) double start;
/// The end time of the range.
@property (nonatomic, readonly) double end;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// The <code>TypedSource</code> object provides the following properties:
/// remark:
///
/// <ul>
///   <li>
///     This represents a media resource characterized by a URL to the resource and optionally information about the resource.
///   </li>
///   <li>
///     This optional information can be DRM parameters for that specific source.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC13THEOplayerSDK11TypedSource")
@interface TypedSource : NSObject
/// The ‘src’ property represents the source URL of the manifest or video file to be played.
@property (nonatomic, copy) NSURL * _Nonnull src;
/// Specifies the content type (MIME type) of source being played.
/// remark:
///
/// <ul>
///   <li>
///     <code>'application/x-mpegURL'</code> or <code>'application/vnd.apple.mpegurl'</code> indicates HLS.
///   </li>
///   <li>
///     <code>'video/mp4'</code> indicates MP4.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nonnull type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end











#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
